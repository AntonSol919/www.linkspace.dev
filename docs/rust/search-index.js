var searchIndex = new Map(JSON.parse('[\
["linkspace",{"doc":"Linkspace ","t":"PEIIPSSEEFCNNNNCCNNNNNNCEEEEEEEEEEEEEEEEEEEECCCNNCCNENNNNCNJHHHHHCFFONNNNNNHNNNNNNNNNNNNNNNHNOHNNNNNNNNNJSSSSSSSSSSSSSSSSSSSSSJJJJJCCCSSSHHHHHHFJNNNNNONNOONNHHHHOONNNNNHHHHHJPPPPGPTPPPPPPPPPFPPPFPFFJFPPPPFPPPPPPPNONNNNNNNNNNHNNNNNNNNNNNNNNNNONNNNHNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNOOONNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNHHHHHHHHHHHHFTFPPPTTTTPITTTTPIPPPPPPTPTTTTFIPPPPFKFIKFFFPPGFKKFPIIPIIITTPKFIPIGIIPPPPHNNNHNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNHNNNNNNNNNNNNNMNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNOONNMNNNNNNNNHNNNNNNMNNNNNNNNNNNNNMNNNOMNNNNMNNNOOMNMNNNONNNNNNHHNNNNNNNNNHHNMNNNNNNHNONNNNNNOMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNOTTTTPGFFFFFTTTTNNNNNNNNNNNNNHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOTPPPPPPPPPPPGPPPGPPJPFPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHHHHHNNNNNNNNNNNNNNNNNNNFFNNNNCNNNONNNNNNNNOHHHHHHHHHHHHHHHHHHHHHHHNNNNNNNNHNNPPPKPGNNHNNNNNMNNNNNHNNNNHHHH","n":["Err","Linkspace","LkError","LkResult","Ok","PRIVATE","PUBLIC","Q","Query","SigningKey","abe","borrow","borrow_mut","clone","clone_into","consts","conventions","fmt","from","generate","generate_with","into","into_result","key","lk_datapoint","lk_encode","lk_eval","lk_key","lk_keypoint","lk_linkpoint","lk_open","lk_open_inmem","lk_process","lk_process_while","lk_pull","lk_query","lk_query_parse","lk_query_print","lk_query_push","lk_read_one","lk_stop","lk_tap","lk_tokenize_abe","lk_write","misc","point","prelude","pubkey","pubkey_bytes","query","runtime","to_owned","try_cb","try_from","try_from","try_into","type_id","varscope","vzip","DEFAULT_PKT","lk_encode","lk_eval","lk_eval_loose","lk_tokenize_abe","lk_try_encode","scope","LkScope","UserData","argv","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","core_scope","default","default","fmt","fmt","from","from","from","from","from","from","from","into","into","into_result","into_result","lk_scope","new","pkt","scope","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","EXCHANGE_DOMAIN","MAX_CONTENT_SIZE","MAX_DATA_SIZE","MAX_KEYPOINT_DATA_SIZE","MAX_LINKPOINT_DATA_SIZE","MAX_LINKS_LEN","MAX_NETPKT_SIZE","MAX_NETPKT_U16SIZE","MAX_POINT_SIZE","MAX_ROOTED_SPACENAME_SIZE","MAX_SPACENAME_PART_SIZE","MAX_SPACENAME_SIZE","MAX_SPACE_DEPTH","MIN_LINKPOINT_SIZE","MIN_NETPKT_SIZE","MIN_POINT_SIZE","NO_PUBKEY","PRIVATE","PRIVATE","PUBLIC","PUBLIC","PUBLIC_GROUP_B64","PUBLIC_GROUP_PKT","SINGLE_LINK_PKT","TEST_GROUP","TEST_GROUP","TEST_GROUP_PKT","handshake","pull","status","ANONYMOUSE_SPACENAME","HANDSHAKE_D","ID_SENTINAL_SPACENAME","phase0_client_init","phase1_server_signs","phase2_client_signs","phase3_server_verify","lk_pull","lk_pull_point","LkStatus","STATUS_SPACE","borrow","borrow_mut","clone","clone_into","default","domain","fmt","from","group","instance","into","into_result","lk_status_overwatch","lk_status_request","lk_status_set","lk_status_watch","objtype","qid","to_owned","try_from","try_into","type_id","vzip","lk_key","lk_key_decrypt","lk_key_encrypt","lk_key_pubkey","lk_keygen","DEFAULT_ROUTING_BITS","DataF","DataSizeF","DepthF","DomainF","FieldEnum","GroupIDF","LIST","LinksLenF","Part0F","Part1F","Part2F","Part3F","Part4F","Part5F","Part6F","Part7F","PktCmp","PktHashF","PktTypeF","PubKeyF","QuickDedup","RSpaceF","RecvPkt","ReroutePkt","START_STAMP","ShareArcPkt","SignatureF","SizeF","SpaceF","StampF","TreeEntry","VarHopF","VarNetFlagsF","VarStampF","VarUBits0F","VarUBits1F","VarUBits2F","VarUBits3F","abe","arc","as_netarc","as_netarc","as_netarc","as_netbox","as_netbox","as_netptr","as_netptr","as_point","as_point","as_point","blake3","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_arc","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","btree_key","btree_key","byte_segments","byte_segments","byte_segments","bytes","bytes2uniform","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","data","data","data","data_size","deref","deref","deref","deserialize","deserialize","deserialize","display","eq","eq","eq","fixed_size","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_db_unchecked","from_dyn","from_pkt","from_str","hash","hash","hash_ref","hash_ref","hash_ref","info","into","into","into","into","into","into","into","into_abe","into_result","into_result","into_result","into_result","into_result","into_result","into_result","linkpoint_header","linkpoint_header","linkpoint_header","links_len","local_log_ptr","map","mut_route","net_header","net_header_mut","net_header_ref","net_header_ref","net_header_ref","new","new","new","owned","padding","padding","padding","partial_cmp","partial_cmp","parts","parts","parts","pkt","pkt","pkt","pkt_segments","pkt_segments","pkt_segments","point_header_ref","point_header_ref","point_header_ref","recently_seen","recv","recv","recv","recv","serialize","serialize","signed","signed","signed","stamp","tail","tail","tail","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_id","try_from_name","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_to_abe","type_id","type_id","type_id","type_id","type_id","type_id","type_id","val","vzip","vzip","vzip","vzip","vzip","vzip","vzip","read_pkt","read_pkt_len","lk_datapoint","lk_datapoint_ref","lk_deserialize","lk_deserialize_len","lk_deserialize_unchecked","lk_keypoint","lk_keypoint_ref","lk_linkpoint","lk_linkpoint_ref","lk_serialize","AB","ALWAYS_ZERO","B64","BadOffset","CapacityError","ContentLen","DATA","DATA_POINT","DEFAULT","DONT_FORWARD","DataOffsetIncompatible","Domain","EMPTY","EMPTY","ERROR","ERROR_POINT","EmptyPartIdx","GroupID","HashMismatch","HeaderReservedSet","ISPOffsetIncompatible","IndivisableLinkbytes","InvalidPktDataLength","InvalidSignature","KEY_POINT","KeyPointLength","LINK","LINKED_IN_FUTURE_PKT","LINKED_IN_PREVIOUS_PKT","LINK_POINT","Link","LkHash","MaxDepth","MissingBytes","MissingHeader","MissingIdx","NetFlags","NetPkt","NetPktArc","NetPktBox","NetPktExt","NetPktHeader","NetPktParts","NetPktPtr","PaddingBitsNotU8Max","PartSize","PktError","PktFmt","Point","PointExt","PointTypeFlags","PrivateGroup","PubKey","RecvPktPtr","ReservedBitsSet","RootedSpace","RootedSpaceBuf","RootedStaticSpace","SIGNATURE","SILENT","SignedInvalidPkt","SigningExt","SigningKey","Space","Space","SpaceBuf","SpaceError","Stamp","Tag","TailLength","TailLength","UnknownPktType","ZeroPart","ab","all","all","and_flags","as_abtxt_c","as_be_bytes","as_be_bytes","as_bytes","as_bytes","as_datapoint","as_keypoint","as_linkpoint","as_mut_sized","as_netarc","as_netarc","as_netarc","as_netbox","as_netbox","as_netparts","as_netpkt_bytes","as_netptr","as_netptr","as_point","as_point","as_point","as_point","as_ptr","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref_cut","as_rules","as_sized","as_str","as_str","b64","b64_into","b64_mini","bit_and","bit_and","bit_or","bit_or","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bits","bits","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_segments","byte_segments","byte_segments","byte_segments","cfrom","check","check","check","check","check_private","checked_add","checked_add","checked_sub","checked_sub","cinto","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","complement","complement","compute_hash","contains","contains","cut_prefix_nulls","data","data","data","data","decr","decr","default","default","default","depth","deref","deref","deref","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","difference","difference","domain","empty","empty","endian_types","eq","eq","eq","eq","eq","eq","eq","eq","extend","extend","fields","flags","flags_u8","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt_opts","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_bytes","from_bytes_unchecked","from_header_and_copy","from_iter","from_iter","from_name","from_name","from_raw_arc","from_ref","from_ref","from_str","from_str","from_str","from_u128","from_u256","from_unchecked","get_data_str","get_depth","get_domain","get_domain","get_field","get_group","get_group","get_links","get_pubkey","get_recv","get_rooted_space","get_signature","get_space","get_stamp","group","hash","hash","hash","hash","hash_ref","hash_ref","hash_ref","hash_ref","hop","hop","inc","inc","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into_bytes","into_iter","into_iter","into_raw_arc","into_result","into_result","into_result","into_result","into_result","into_result","into_result","into_result","into_result","into_result","into_result","into_result","io","is_all","is_all","is_datapoint","is_empty","is_empty","is_keypoint","is_linkpoint","is_valid_bit_pattern","is_valid_bit_pattern","iter","iter","iter_names","iter_names","leading_ones","leading_ones","leading_zeros","leading_zeros","linkpoint_header","linkpoint_header","linkpoint_header","linkpoint_header","links","links_select","mut_flags_u8","net_header","net_header","net_header","net_header_mut","net_header_mut","net_header_ref","net_header_ref","net_header_ref","net_header_ref","new","not","not","not","not","now","overflowing_add","overflowing_add","overflowing_shl","overflowing_shl","overflowing_shr","overflowing_shr","padding","padding","padding","padding","parse","parse_abtxt","parse_scope","parse_str","parse_str","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","parts","parts","parts","parts","pkt","pkt_segments","pkt_segments","pkt_segments","pkt_segments","point_header","point_header_ref","point_header_ref","point_header_ref","point_header_ref","prefix","ptr","pubkey","pubkey","recv","recv","recv","recv","recv","refcount","remove","remove","requires_more","reroute","rooted_space","rspace1","rspace_buf","serialize","serialize","serialize","serialize","serialize","serialize","serialize","set","set","set_domain","set_group","signature","signed","signed","signed","signed","size","source","space","space_buf","stamp","stamp","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","tag","tail","tail","tail","tail","test","thin_arc","to_default_str","to_html","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_str","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_u128","to_u256","toggle","toggle","trailing_ones","trailing_ones","trailing_zeros","trailing_zeros","try_ab","try_fit_byte_slice","try_fit_bytes_or_b64","try_fit_slice","try_fit_slice_filled","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_utf8","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ubits","uint","uint","uint","uint","unchecked_from","union","union","utf8","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_flags","write_abe","write_abe","write_abe","write_abe_str","write_abe_str","netpkt_size","MAX","MAX","MAX","MAX","Overflow","TryFitSliceError","U128","U16","U32","U64","U8","ZERO","ZERO","ZERO","ZERO","abe_bits","add","add","add","add","align","align","align","align","as_ref","as_ref","as_ref","as_ref","binary_fmt_slice","binary_str","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","check","check","check","check","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","default","default","default","default","deref","deref","deref","deref","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_str","from_str","from_str","get","get","get","get","hash","hash","hash","hash","incr","incr","incr","incr","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_result","into_result","into_result","into_result","into_result","into_result","new","new","new","new","new","not","not","not","not","partial_cmp","partial_cmp","partial_cmp","partial_cmp","saturating_add","saturating_add","saturating_add","saturating_add","saturating_sub","saturating_sub","saturating_sub","saturating_sub","serialize","serialize","serialize","serialize","set","set","set","set","to_bytes","to_bytes","to_bytes","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","write_abe","write_abe","write_abe","write_abe","write_abe","write_abe_str","write_abe_str","write_abe_str","write_abe_str","write_abe_str","got","max","ALL","DataSize","Depth","Domain","Follow","Group","Hash","Hop","I","IBranch","IRead","IWatch","KnownOptions","LinksLen","Netflags","NotifyClose","PredicateType","Prefix","Pubkey","Q","Qid","Query","Read","Recv","Size","Space","Stamp","Type","Ubits0","Ubits1","Ubits2","Ubits3","VarStamp","as_str","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","deref","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from_str","from_str","info","into","into","into","into_result","into_result","into_result","iter_all","lk_hash_query","lk_query","lk_query_clear","lk_query_compile","lk_query_parse","lk_query_print","lk_query_push","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from_id","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Linkspace","LkInfo","borrow","borrow","borrow_mut","borrow_mut","cb","clone","clone_into","deserialize","dir","fmt","fmt","from","from","into","into","into_result","into_result","kind","lk_await_write","lk_get_runtime","lk_info","lk_last","lk_list_watches","lk_open","lk_open_inmem","lk_process","lk_process_while","lk_read","lk_read_hashes","lk_read_one","lk_read_one_ref","lk_set_runtime","lk_split_runtime","lk_stop","lk_tap","lk_tap2","lk_watch","lk_watch2","lk_write","lk_write_all","lk_write_all_ext","serialize","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vspan","vzip","vzip","Break","Closed","Finish","PktHandler","Replaced","StopReason","borrow","borrow_mut","cb","clone","clone_into","eq","fmt","from","handle_pkt","hash","into","into_result","stopped","to_owned","try_cb","try_from","try_into","type_id","vzip","lk_eval","lk_key","lk_query_parse","lk_try_encode"],"q":[[0,"linkspace"],[59,"linkspace::abe"],[66,"linkspace::abe::scope"],[104,"linkspace::consts"],[131,"linkspace::conventions"],[134,"linkspace::conventions::handshake"],[141,"linkspace::conventions::pull"],[143,"linkspace::conventions::status"],[168,"linkspace::key"],[173,"linkspace::misc"],[404,"linkspace::misc::deserialize"],[406,"linkspace::point"],[416,"linkspace::prelude"],[1039,"linkspace::prelude::PktError"],[1040,"linkspace::prelude::endian_types"],[1281,"linkspace::prelude::endian_types::TryFitSliceError"],[1283,"linkspace::query"],[1376,"linkspace::runtime"],[1430,"linkspace::runtime::cb"],[1455,"linkspace::varscope"],[1459,"core::fmt"],[1460,"core::fmt"],[1461,"rand_core"],[1462,"rand_core"],[1463,"core::any"],[1464,"alloc::string"],[1465,"core::convert"],[1466,"alloc::vec"],[1467,"core::convert"],[1468,"core::fmt"],[1469,"anyhow"],[1470,"core::ops::function"],[1471,"linkspace_pkt::netpkt::netpkt_ptr"],[1472,"alloc::boxed"],[1473,"linkspace_pkt::netpkt"],[1474,"linkspace_pkt::netpkt::netpkt_arc"],[1475,"linkspace_pkt::netpkt::tree_order"],[1476,"linkspace_pkt::byte_segments"],[1477,"std::io"],[1478,"std::io::error"],[1479,"core::clone"],[1480,"core::cmp"],[1481,"linkspace_pkt::netpkt::tree_order"],[1482,"serde::de"],[1483,"serde::de"],[1484,"linkspace_pkt::field_ids"],[1485,"linkspace_pkt::point"],[1486,"core::cmp"],[1487,"linkspace_pkt::point"],[1488,"serde::ser"],[1489,"abe::ast"],[1490,"alloc::borrow"],[1491,"std::io::error"],[1492,"abe::ast"],[1493,"core::iter::traits::collect"],[1494,"linkspace_pkt::point_parts"],[1495,"linkspace_pkt::netpkt::header"],[1496,"linkspace_pkt::netpkt::partial"],[1497,"core::str::error"],[1498,"linkspace_core::predicate::exprs"],[1499,"linkspace_pkt::rooted_space"],[1500,"linkspace_pkt::space"],[1501,"core::hash"],[1502,"bitflags::iter"],[1503,"core::str::traits"],[1504,"abe::abtxt"],[1505,"byte_fmt"],[1506,"base64::decode"],[1507,"core::error"],[1508,"abe"],[1509,"linkspace_core::predicate::predicate_type"],[1510,"std::path"],[1511,"linkspace_core::matcher"],[1512,"tracing::span"],[1513,"core::ops::control_flow"],[1514,"core::ops::try_trait"]],"d":["Contains the error value","","The only error format linkspace supports - alias for …","Result for LkError","Contains the success value","","","","","","ascii byte expression utilities","","","","","consts for common groups &amp; domains","A set of functions that adhere to conventions","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","cryptographic key functions for use in lk_keypoint","","","","","","","","","","","","","","","","","","","","","misc functions &amp; tools - less stable","creating points","Re-export common types","","","query functions to match points","a runtime to watch for new points from other processes or …","","","","","","","Functions with a custom eval scope - useful for security …","","default fmt in many cases and output for <code>[pkt]</code>","encode bytes as an abe that evaluate back to bytes.","Evaluate an expression and return the bytes","Same as lk_eval but accepts bytes outside the range …","An abe parser. Useful to split a cli argument like ’…","lk_encode with Err on:","build a custom scope for ABE for use in varscope","Custom scope used in crate::varscope build with core_scope…","User config for adding common scopes","Add the argv scope e.g. “[0] and [1]”","","","","","","","create the a core_scope - includes basic byte functions …","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","scope with a explicit Linkspace and optionally add the os …","create empty UserData","Set a packet in scope e.g. “[hash:str] in group …","the default scope used with lk_eval - includes runtime …","","","","","","","","","","pull requests are saved here.","","","","","","","","","","","","","","","","","","","","","","","","","","","","utility functions for making pull requests.","utility functions for the private status convention.","","","","","","","","Save a query in linkspace using the point format …","Prefer using lk_pull - creates a pullpoint from a query","Options for a local status request.","const ‘/status’ space","","","","","","the domain of interests","","Returns the argument unchanged.","the group of interests (NOT the group to query, see mod …","the instance","Calls <code>U::from(self)</code>.","","A query that returns both requests and updates","A query that returns both requests and updates","Insert a callback that is triggered on a request. Must …","watch for any points matching","the object type of interests","qid to use for query - reuse of qid will remove the …","","","","","","linkspace stored identity open (or generate) the key <code>name</code> …","decrypt the result of lk_key_encrypt","Encrypt the private key into a storable/share-able string …","read the public key portion of a lk_key_encrypt string","generate a new key","A thread local default net header value when creating new …","","","","","An enum that provides access to the fields in a NetPkt","","","","","","","","","","","","A newtype around any T:NetPkt that implements Eq (and …","","","","Extremely light best-effort deduplication.","","Wrapper around a NetPkt that sets its recv field","Wrapper around a netpkt with a mutable NetHeader","","Wrapper around a NetPkt that ensures .as_netarc() is only …","","","","","‘tree’ index order is a Ord of NetPkts defined by the …","","","","","","","","","","","","","","","","","","","","Blake3 hash","","","","","","","","","","","","","","","","","","","","","This always returns something even if the field doesn’t …","Read bytes as a [0,1) float by reading the first 52 bits. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","create a datapoint with upto MAX_CONTENT_SIZE bytes","like lk_datapoint but keeps it on the stack in rust enum …","parse a NetPktPtr (the standard binary format) from a …","Determine the length required for lk_deserialize to …","like lk_deserialize but skips the hash validation check","create a keypoint, i.e. a signed lk_linkpoint","like lk_keypoint but keeps it on the stack in rust enum …","create a new linkpoint NetPktBox","like lk_linkpoint but keeps it on the stack in rust enum …","Writes any impl NetPkt into the binary netpkt format","newtype around bytes to print/parse [abe] text","","newtype around bytes to print/parse b64 (url-safe …","","","","","","","Request that this packet is not forwarded","","Alias for <code>AB&lt;[u8;16]&gt;</code>","","Indicate that the chances of anybody interested in this …","","","","Alias for <code>B64&lt;[u8;32]\\\\&gt;</code>","","","","","","","","","","","","","A Tag and LkHash","Blake3 hash of the packet content. Alias for <code>B64&lt;[u8;32]\\\\&gt;</code>","","","","","Variable flags used in transit","A trait to access fields of a net pkt. Auto impls NetPktExt…","Arc around the byte repr NetPkt","Heap allocated repr of a NetPkt.","Utilities for NetPkt","Variable fields in a crate::NetPkt used in point exchange","Rust enum repr of a NetPkt","Byte repr of a NetPkt","","","","A static packet formatter similar to DEFAULT_PKT without …","General trait for accessing point field.","Directly access a Point’s domain, group, links, …","Pkt flag indicating its type.","","Taproot Schnorr publickey. Alias for <code>B64&lt;[u8;32]&gt;</code>","","","","","","","Indicate that the chances of anybody interested in this …","","","","Explicitly Space bytes (analogous to [str])","","Owned Space bytes (analogous to String)","","A Big endian u64 of microseconds since EPOCH","Alias for <code>AB&lt;[u8;16]&gt;</code>","","","","","copy <code>val</code> into array of N bytes prepending 0’s as needed. …","Get a flags value with all known bits set.","Get a flags value with all known bits set.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","Get the underlying bits value.","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","","","","","","","","","","DEFAULT_ROUTING_BITS","","","","","","","","","","","","","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","","Get a flags value with all bits unset.","Get a flags value with all bits unset.","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value exactly.","","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","","Safety","Safety","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Safety","","","","","","","","The caller must ensure PktHash matches the Pkt","","","","","","","","","","see NetPkt::recv","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","","","","","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","","","","","Return a LinkPointHeader, works for both key and link …","","","","","","","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","current time as big endian u64 microseconds since epoch","","","","","","","Points are padded with upto 7 \\\\xFF bytes and are u64 …","","","","","","","","","","","","","","The rusty enum repr of a point.","","","","","A utility function to translate this format into bytes for …","","","","","","","","","","Usually a LkHash, sometimes a PubKey or GroupID","","","recv is somewhat special. It depends on the context. …","","","","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","","","","","","","","","","","","","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","","","","","","","","Padded size","","","","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","create a html fragment describing the packet","","","","","","","","","","","","","","","","","","","","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Self::utf8 but fallback to abtxt","","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","“data_size”","“depth”","“domain”","try and also return the linked packets.","“group”","“hash”","“hop”","“i”","“i_branch”","“i_read”","“i_watch”","","“links_len”","“netflags”","(not supported by lk_tap) - append the request on finish - …","A list of all supported query predicates","“prefix”","“pubkey”","The empty_query","The arg is the query id under which to operate. Can be …","A set of predicates and options used to select packets","which table+order to walk when reading from the database","“recv”","“size”","“space”","“stamp”","“type”","“ubits0”","“ubits1”","“ubits2”","“ubits3”","“varstamp”","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Create a new Query specifically for a hash. Sets the right …","Create a new Query. Copy from a template. Q is the empty …","Clear a Query for reuse","Compile a Query into a function which tests packets to …","Add multiple ABE encoded statements to a Query","Get the string representation of a Query","Add a single statement to a Query, potentially skipping an …","","","","","","","","","","","","","","","","","","","","The linkspace runtime.","miscellaneous information about the runtime","","","","","(rust only) lk_tap takes the callback PktHandler which are …","","","","the path under which it is saved","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","the kind of runtime in use - currently only known is “…","A future awaiting new lk_write to the storage engine.","get/set the thread local runtime used as default - …","get LkInfo of a linkspace runtime","Last recv stamp of this runtime. i.e. last result from …","iterate over all active (Qid,Query)","open a linkspace runtime.","opens an in memory linkspace runtime. Unlike lk_open the …","process the log of new packets and trigger callbacks. …","continuously process callbacks until:","Run callback for every match for the query in the database.","TODO: DOC","get the first result from the database matching the query.","read a single packet directly without copying.*","","create clone that shares the storage engine, but with an …","close lk_tap watches based on the query id ‘:qid:example…","Registers the query under its ‘qid’ ( .e.g. set by …","lk_tap with a custom log tracing::Span The span will be …","lk_tap that clears the :read option.","lk_watch with a custom log tracing::Span The span will be …","save a packet. Returns true if new and false if its old.","save multiple packets at once - returns the number of new …","returns the range [incusive,exclusive) of recv stamps used …","","","","","","","","","See lk_tap2","","","Callback returned trueish value","","The query is never going to return succes again - eg. recv …","Callbacks stored in a Linkspace instance. use cb and try_cb…","","","","","takes a …","","","","","Returns the argument unchanged.","Handles an event.","","Calls <code>U::from(self)</code>.","","Called when break, finished, or replaced","","takes any fn(&amp;dyn NetPkt,&amp;Linkspace) -&gt; Try (e.g. Result …","","","","","crate::lk_eval/crate::abe::lk_eval_loose with a custom …","lk_key with a custom context","custom scope version of super::lk_query_parse","lk_eval with a custom scope that errors on bad option &amp; …"],"i":[18,0,0,0,18,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,19,24,19,24,19,19,19,0,24,19,24,19,24,19,19,19,19,19,19,24,19,24,19,0,19,19,0,19,24,19,24,19,24,19,24,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,37,37,37,37,37,37,37,37,37,37,37,0,0,0,0,37,37,37,37,37,37,37,0,0,0,0,0,0,45,45,45,45,0,45,45,45,45,45,45,45,45,45,45,45,0,45,45,45,0,45,0,0,0,0,45,45,45,45,0,45,45,45,45,45,45,45,45,50,47,50,51,47,51,50,51,47,50,51,0,80,45,47,50,65,51,58,50,80,45,47,50,65,51,58,58,58,47,50,51,45,0,45,47,50,65,51,58,45,47,50,65,51,58,65,47,50,51,58,47,50,51,0,65,58,45,45,65,58,45,45,45,47,50,65,51,58,58,80,45,47,50,65,51,51,58,58,51,58,45,65,58,47,50,51,45,80,45,47,50,65,51,58,45,80,45,47,50,65,51,58,47,50,51,58,58,51,45,47,47,47,50,51,80,47,50,51,47,50,51,65,58,47,50,51,47,50,51,47,50,51,47,50,51,80,47,50,51,51,65,58,47,50,51,58,47,50,51,45,47,50,65,51,58,58,45,58,80,45,47,50,65,51,58,45,45,80,45,47,50,65,51,58,45,80,45,47,50,65,51,58,58,80,45,47,50,65,51,58,0,0,0,0,0,0,0,0,0,0,0,0,0,95,0,103,103,91,96,96,42,95,91,0,79,96,96,96,103,0,91,91,91,91,91,91,96,91,96,95,95,96,0,0,103,91,91,103,0,0,0,0,0,0,0,0,91,103,0,0,0,0,0,91,0,0,91,0,0,0,96,95,91,0,0,0,91,0,0,0,0,103,91,91,103,0,95,96,79,0,94,8,79,42,97,97,97,54,54,48,26,48,26,99,54,54,48,26,54,48,30,48,94,94,8,8,8,94,96,54,94,96,8,8,8,94,8,94,8,95,96,95,96,95,96,95,96,95,95,96,96,8,95,96,95,96,54,94,94,8,8,109,79,95,48,48,30,103,42,96,91,54,94,8,109,79,95,48,30,103,42,96,91,26,54,48,30,79,54,94,8,42,97,94,8,94,8,79,94,8,79,95,48,30,103,42,96,91,94,8,79,95,48,30,103,42,96,91,94,8,95,42,96,95,96,97,95,96,94,56,54,48,30,94,8,94,8,79,97,54,94,8,48,30,94,8,94,8,95,48,42,96,95,96,97,95,96,0,94,8,79,95,30,103,42,96,95,96,97,79,79,54,94,94,8,8,109,109,79,79,95,95,95,95,95,48,30,103,103,42,42,96,96,96,96,96,96,91,91,109,54,94,94,94,94,94,8,8,8,8,8,8,109,79,79,79,95,48,48,48,30,30,103,42,42,96,91,91,95,96,95,95,96,96,95,96,42,54,48,95,96,95,96,48,94,8,94,94,8,94,8,30,97,97,0,97,96,0,97,97,97,99,97,97,97,97,97,99,94,8,42,26,54,48,30,79,79,94,8,95,96,95,96,95,96,54,94,8,109,79,95,48,30,103,42,96,91,8,95,96,48,54,94,8,109,79,95,48,30,103,42,96,91,91,95,96,97,95,96,97,97,94,8,95,96,95,96,94,8,94,8,56,54,48,30,97,97,79,99,54,30,54,26,26,54,48,30,42,94,8,95,96,0,94,8,94,8,94,8,56,54,48,30,94,94,94,8,8,94,8,95,42,96,56,54,48,30,148,56,54,48,30,97,56,54,48,30,79,42,127,97,26,54,48,30,148,48,95,96,91,54,97,0,0,54,94,8,95,48,42,96,95,96,0,0,97,56,54,48,30,99,91,97,0,97,79,95,96,95,96,95,96,42,56,54,48,30,96,48,99,109,54,94,8,79,95,48,30,103,42,96,91,109,94,8,109,79,103,42,96,91,94,8,95,96,94,8,94,8,0,94,8,8,94,54,94,94,94,8,8,8,109,79,95,48,30,103,42,42,42,42,96,91,54,94,8,109,79,95,48,30,103,42,96,91,94,54,94,8,109,79,95,48,30,103,42,96,91,79,94,94,94,94,96,95,96,94,54,94,8,109,79,95,48,30,103,42,96,91,79,94,8,79,94,8,149,67,130,75,131,134,0,0,0,0,0,0,67,130,75,131,132,67,130,75,131,67,130,75,131,67,130,75,131,0,0,67,130,75,131,67,130,75,131,67,130,75,131,134,132,67,130,75,131,134,132,67,130,75,131,132,67,130,75,131,134,132,67,130,75,131,134,132,67,130,75,131,67,130,75,131,67,130,75,131,67,130,75,131,67,130,75,131,132,67,67,67,130,130,130,75,75,75,131,131,131,134,134,132,67,67,67,130,130,130,75,75,75,131,131,131,134,132,132,67,130,75,131,67,130,75,131,67,130,75,131,67,130,75,131,67,67,67,130,130,130,75,75,75,131,131,131,134,132,67,130,75,131,134,132,67,130,75,131,132,67,130,75,131,67,130,75,131,67,130,75,131,67,130,75,131,67,130,75,131,67,130,75,131,67,130,75,131,67,130,75,131,134,132,67,130,75,131,134,67,67,67,130,130,130,75,75,75,131,131,131,134,132,132,67,130,75,131,134,132,67,130,75,131,134,132,67,130,75,131,134,132,67,130,75,131,132,67,130,75,131,132,150,150,136,136,136,136,135,136,136,136,136,136,136,136,0,136,136,135,0,136,136,0,135,0,135,136,136,136,136,136,136,136,136,136,136,135,34,136,135,34,136,135,34,136,135,34,136,135,34,135,136,34,34,136,136,135,34,136,135,136,135,136,34,136,135,34,136,135,135,0,0,0,0,0,0,0,34,136,135,34,136,135,34,136,135,136,34,136,135,34,136,135,34,136,135,0,0,28,138,28,138,0,28,28,138,138,28,138,28,138,28,138,28,138,138,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,28,28,138,28,138,28,138,0,28,138,144,144,144,0,144,0,144,144,0,144,144,144,144,144,43,144,144,144,43,144,0,144,144,144,144,0,0,0,0],"f":"```````````{ce{}{}}0{bb}{{ce}d{}{}}``{{bf}{{j{dh}}}}{cc{}}{{}b}{cb{ln}}6{c{{j{e}}}{}{}}````````````````````````{bA`}{b{{Ad{Ab}}}}``9`2{{{Ad{Ab}}}{{j{bAf}}}}3{cAh{}}`;`{{cAj}Al{{B`{{An{Ab}}}}}}{{Ajc}{{Bd{{Bb{Ab}}}}}{{Bh{Bf}}}}0{{Aj{An{Ab}}c}{{Bd{d}}}{{Bn{AbBjAj}{{Bl{Bj}}}}}}{{cAjBj}{{Bd{Al}}}{{B`{{An{Ab}}}}}}````????{BfBf}>{BfC`}{{}C`}{{}Bf}{{C`f}Cb}{{Bff}Cb}{cc{}}{dBf}{{{Ad{{An{Ab}}}}}Bf}2{{{Cf{Cd{An{{An{Ab}}}}}}}Bf}{CdBf}{{{An{{An{Ab}}}}}Bf}{ce{}{}}0{c{{j{e}}}{}{}}0{{{Cj{Ch}}BfBj}{{Bd{C`}}}};`{Bf{{Bd{C`}}}}32222{cAh{}}044`````````````````````````````````{bCl}{{cb{Cj{Cn}}g}{{j{eD`}}}Cd{}{{Db{Cl}{{Bl{e}}}}}}{{ceb{Cj{Cn}}i}{{j{{Cf{gA`}}D`}}}CdCd{}{{Db{Cl}{{Bl{g}}}}}}{{cegb}{{j{A`D`}}}CdCdCd}{{ChDd}{{Bd{Df}}}}{Dd{{Bd{Dh}}}}``::{DjDj}{{ce}d{}{}}{{}Dj}`{{Djf}Cb}{cc{}}``?>{{DjDl}{{Bd{Dd}}}}{Dj{{Bd{Dh}}}}{{ChDjc}{{Bd{d}}}{{Bn{ChDnE`EbEd}{{Bl{{Bd{Dh}}}}}}}}{{ChDjDlc}{{Bd{Bj}}}Ef}``{ce{}{}}{c{{j{e}}}{}{}}0{cAh{}}2{{Ch{Cj{{An{Ab}}}}{Cj{Aj}}Bj}{{Bd{b}}}}{{Aj{An{Ab}}}{{Bd{b}}}}{{b{An{Ab}}}Al}{Aj{{Bd{Eh}}}}{{}b}```````````````````````````````````````{{EjCdEl}{{j{dh}}}}`{{{En{c}}}F`{CdFb}}{{{Fd{c}}}F`{CdFb}}{{{Ff{c}}}F`{CdFb}}{{{En{c}}}{{Fj{Fh}}}{CdFb}}{{{Ff{c}}}{{Fj{Fh}}}{CdFb}}{{{Fd{c}}}FlFn}{{{Ff{c}}}FlFn}{{{En{c}}}G`{CdFb}}{{{Fd{c}}}G`{CdFb}}{{{Ff{c}}}G`{CdFb}}{{{An{Ab}}}{{A`{{Ad{Ab}}}}}}{ce{}{}}000000{{{Fd{c}}}Gb{CdFb}}1111111{{{Gd{ce}}}{{Gf{{An{Ab}}}}}{{B`{{An{Ab}}}}}{}}`{{{En{c}}}Gh{CdFb}}{{{Fd{c}}}Gh{CdFb}}{{{Ff{c}}}Gh{CdFb}}{{EjCdGj}{{j{dGl}}}}{{{An{Ab}}}Gn}{EjEj}{{{En{c}}}{{En{c}}}{H`Fb}}{{{Fd{c}}}{{Fd{c}}}{H`Fb}}{{{Hb{c}}}{{Hb{c}}}H`}{{{Ff{c}}}{{Ff{c}}}{H`Fb}}{{{Gd{ce}}}{{Gd{ce}}}H`H`}{{ce}d{}{}}00000{{{Hb{c}}{Hb{c}}}HdCd}{c{{An{Ab}}}{}}00{{{Gd{ce}}}Hf{}{{Hj{Hh}}}}{{{En{c}}}{}Fb}{{{Fd{c}}}{}Fb}{{{Ff{c}}}{}Fb}`{c{{j{{Hb{e}}}}}HlHn}{c{{j{{Gd{eg}}}}}HlHnHn}{{EjCdEl}{{j{dh}}}}{{EjEj}Bj}{{{Hb{c}}{Hb{c}}}BjCd}{{{Gd{ce}}{Gd{ce}}}BjI`I`}{Ej{{Cj{Cn}}}}{{Ejf}{{j{dh}}}}0{{{En{c}}f}{{j{dh}}}{IbFb}}{{{Fd{c}}f}{{j{dh}}}{IbFb}}{{{Hb{c}}f}{{j{dh}}}Ib}{{{Ff{c}}f}{{j{dh}}}{IbFb}}{{{Gd{ce}}f}{{j{dh}}}{{B`{{An{Ab}}}}}{{Hj{Hh}}}}0{cc{}}00000{Cd{{Ff{c}}}{{Id{Cd}}}}1{{{Cf{{An{Ab}}Hh}}}{{Gd{{An{Ab}}Hh}}}}1{{Ifc}{{Cj{Gd}}}Cd}{Aj{{j{Ej}}}}{{{Hb{c}}e}dCdIh}{{{Gd{ce}}}A`{}{{Hj{Hh}}}}{{{En{c}}}A`{CdFb}}{{{Fd{c}}}A`{CdFb}}{{{Ff{c}}}A`{CdFb}}{EjIj}{ce{}{}}000000{{EjCd}Al}{c{{j{e}}}{}{}}000000{c{{Cj{Il}}}{}}00{{{Gd{ce}}}Hf{}{{Hj{Hh}}}}{{{Gd{ce}}}If{}{{Hj{Hh}}}}{{{Ff{c}}g}{{Ff{e}}}{}{}{{Db{c}{{Bl{e}}}}}}{{EjIn}{{Cj{{An{Ab}}}}}}`{{{En{c}}}{{Cj{In}}}{CdFb}}{{{En{c}}}In{CdFb}}{{{Fd{c}}}In{CdFb}}{{{Ff{c}}}In{CdFb}}{CnJ`}{c{{En{c}}}Cd}{c{{Fd{c}}}Cd}{{{Ff{c}}}FfCd}{c{{An{Ab}}}{}}00{{{Hb{c}}{Hb{c}}}{{Cj{Hd}}}Cd}{{{Gd{ce}}{Gd{ce}}}{{Cj{Hd}}}JbJb}{cJd{}}00```{cGh{}}00{cJf{}}00{{J`A`}Bj}{{{En{c}}}{{Cj{If}}}{CdFb}}{{{Fd{c}}}{{Cj{If}}}{CdFb}}{{{Ff{c}}}{{Cj{If}}}{CdFb}}`{{{Hb{c}}e}jJhJj}{{{Gd{ce}}g}jJhJhJj}{c{{Cj{Jl}}}{}}00{{{Gd{ce}}}If{}{{Hj{Hh}}}}{c{{Cj{Jn}}}{}}00{ce{}{}}00000{{{Gd{{An{Ab}}Hh}}}Gd}{cAl{}}0{c{{j{e}}}{}{}}000000{{{An{Ab}}}{{Cj{Ej}}}}{Aj{{Cj{Ej}}}}2222222{{EjK`}{{Cj{{Bb{Kb}}}}}}{cAh{}}000000`7777777{{{An{Ab}}Bj}{{j{{Kd{Fl}}Kf}}}}{{{An{Ab}}}{{j{KhKf}}}}{{{An{Ab}}}{{Bd{Dh}}}}{{{An{Ab}}}{{Bd{Cl}}}}{{{An{Ab}}Bj}{{j{{Cf{{Kd{Fl}}{An{Ab}}}}Kf}}}}30{{b{An{Ab}}DnE`Eb{An{Ed}}{Cj{Dl}}}{{Bd{Dh}}}}{{b{An{Ab}}DnE`Eb{An{Ed}}{Cj{Dl}}}{{Bd{Cl}}}}{{{An{Ab}}DnE`Eb{An{Ed}}{Cj{Dl}}}{{Bd{Dh}}}}{{{An{Ab}}DnE`Eb{An{Ed}}{Cj{Dl}}}{{Bd{Cl}}}}{{CdBjGj}{{Kj{d}}}}`````````````````````````````````````````````````````````````````````````{{{An{Ab}}}{{Kl{{Ad{Ab}}}}}}{{}Kn}{{}L`}{{InKnKn}In}{{{An{Ab}}Bj}{{Kd{Aj}}}}{{{Kl{{Ad{Ab}}}}Bn}d}{{A`Bn}d}{In{{Ad{Ab}}}}{Ed{{Ad{Ab}}}}{Lb{{Cj{{An{Ab}}}}}}{Lb{{Cj{{Cf{LdJl}}}}}}{Lb{{Cj{Ld}}}}{FlFh}{FlF`}{F`F`}{CdF`}{F`{{Fj{Fh}}}}{Cd{{Fj{Fh}}}}{LfCl}{Fl{{An{Ab}}}}{FlFl}{F`Fl}{CdG`}{FlG`}{F`G`}{ClG`}{F`Ab}{{{Kl{c}}}c{}}{{{Kl{c}}}{{An{Ab}}}{{B`{{An{Ab}}}}}}{{{A`{c}}}c{}}{{{A`{{Ad{Lh}}}}}{{Ad{Ab}}}}{{{A`{c}}}{{An{Ab}}}{{B`{{An{Ab}}}}}}{{{Kl{c}}Bj}{{An{Ab}}}{}}{L`{{Fj{Lj}}}}{FlFh}{{{Kl{c}}Bj}{{Kd{Aj}}}{}}{L`Aj}{{{A`{c}}}Al{}}{{{A`{c}}Al}d{}}1{{{Kl{{Ad{Ab}}}}{Kl{{Ad{Ab}}}}}{{Kl{{Ad{Ab}}}}}}{{A`A`}A`}10{{KnKn}Kn}{{L`L`}L`}{{KnKn}d}{{L`L`}d}3210{KnAb}0{L`Ab}0{{A`A`}}6543{ce{}{}}0{{{Kl{c}}}{{An{Ab}}}{{Hj{{An{Ab}}}}}}{{{A`{c}}}c{}}2222{F`Gb}333333333333333333{CdGh}{FlGh}{F`Gh}{ClGh}{{{Ad{Ab}}}In}{{FlBj}{{j{dKf}}}}{{{An{Kb}}}{{j{dLl}}}}00{Lb{{j{dKf}}}}{{{Kl{{Ad{Ab}}}}{Kl{{Ad{Ab}}}}}{{Cj{{Kl{{Ad{Ab}}}}}}}}{{A`A`}{{Cj{A`}}}}10{In{{Ad{Ab}}}}{{{Kl{c}}}{{Kl{c}}}{H`Fb}}{{{A`{c}}}{{A`{c}}}H`}{InIn}{KnKn}{F`F`}{ClCl}{LnLn}{EdEd}{L`L`}{KfKf}{{ce}d{}{}}000000000{{{Kl{c}}{Kl{c}}}Hd{M`Fb}}{{{A`{c}}{A`{c}}}HdM`}{{KnKn}Hd}{{EdEd}Hd}{{L`L`}Hd}<7{LbA`}{{KnKn}Bj}{{L`L`}Bj}{{{Kl{c}}}{{An{Ab}}}{}}{G`{{An{Ab}}}}{c{{An{Ab}}}{}}00{{{Kl{{Ad{Ab}}}}}{{Cj{{Kl{{Ad{Ab}}}}}}}}{A`{{Cj{A`}}}}{{}{{Kl{c}}}{MbFb}}{{}{{A`{c}}}Mb}{{}In}{Lb{{Cj{Ab}}}}{Fl}{{{Kl{c}}}{}{}}{{{A`{c}}}{}{}}{F`}{Cl}32{c{{j{{Kl{e}}}}}Hl{HnFb}}{c{{j{{A`{e}}}}}HlHn}{c{{j{Kn}}}Hl}{c{{j{F`}}}Hl}{c{{j{Ed}}}Hl}{c{{j{L`}}}Hl}{{KnKn}Kn}{{L`L`}L`}{Lb{{Cj{{Kl{{Ad{Ab}}}}}}}}{{}Kn}{{}L`}`{{{Kl{c}}{Kl{c}}}Bj{I`Fb}}{{{A`{c}}{A`{c}}}BjI`}{{InIn}Bj}{{KnKn}Bj}{{ClCl}Bj}{{LnLn}Bj}{{EdEd}Bj}{{L`L`}Bj}{{Knc}d{{Mf{}{{Md{Kn}}}}}}{{L`c}d{{Mf{}{{Md{L`}}}}}}{LbMh}`{InAb}{{Flf}{{j{dh}}}}{{{Kl{c}}f}{{j{dh}}}{}}0{{{A`{c}}f}{{j{dh}}}{}}0{{Mjf}{{j{dh}}}}0{{Inf}{{j{dh}}}}0{{Knf}{{j{dh}}}}0000{{F`f}{{j{dh}}}}{{Clf}{{j{dh}}}}{{Lnf}{{j{dh}}}}0{{Edf}{{j{dh}}}}0{{L`f}{{j{dh}}}}00000{{Kff}{{j{dh}}}}0{{MjElBjCn}{{j{dh}}}}{cc{}}{{{An{Ab}}}{{Kl{{An{Ab}}}}}}{Lh{{Kl{{Ad{Ab}}}}}}{c{{Kl{c}}}{}}3{Mlc{}}0{c{{A`{c}}}{}}{MnA`}{Mn{{A`{{Ad{Ab}}}}}}{InA`}88{A`In}{N`In}:::{ClF`}{CdF`}{CdCl}==={{{Cf{{Kl{{Ad{Ab}}}}A`}}}Ed}>{LnKf}?{Ab{{Cj{Kn}}}}{Ab{{Cj{L`}}}}{AbKn}0{AbL`}010{{{Ad{Ab}}}Ed}{{{An{Ab}}}Fl}{{NbBjc}{{j{F`Kf}}}{{Db{{An{Ab}}}}}}{cKn{{Mf{}{{Md{Kn}}}}}}{cL`{{Mf{}{{Md{L`}}}}}}{Aj{{Cj{Kn}}}}{Aj{{Cj{L`}}}}{GbF`}{c{{Kl{c}}}Fb}{{{Ad{Ab}}}{{A`{{Ad{Ab}}}}}}{Aj{{j{Kl}}}}{Aj{{j{{Kl{{Ad{Ab}}}}}}}}{Aj{{j{{A`{{Ad{Ab}}}}}}}}{Lh{{Kl{{Ad{Ab}}}}}}{MnA`}{{InA`Jd}Cl}{Lb{{j{AjNd}}}}{LbAb}{{}{{Kl{{Ad{Ab}}}}}}{Lb{{Kl{{Ad{Ab}}}}}}{L`Nf}{{}A`}{LbA`}{Lb{{An{Ed}}}}1{LfIf}{Lb{{Nh{{An{Ab}}}}}}{Lb{{A`{{Ad{Ab}}}}}}{Lb{{Nj{{An{Ab}}}}}}{LbIf}{Lb{{Cj{A`}}}}{LfA`}{{{Kl{c}}e}d{NlFb}Ih}{{{A`{c}}e}dNlIh}{{Edc}dIh}{CdA`}{FlA`}{F`A`}{ClA`}{InIn}`{{{Kl{{Ad{Ab}}}}}{{Cj{{Kl{{Ad{Ab}}}}}}}}{A`{{Cj{A`}}}}{{KnKn}d}{{L`L`}d}{{KnKn}Kn}{{L`L`}L`}{{KnKn}Bj}{{L`L`}Bj}{ce{}{}}00000000000{{{A`{{Ad{Ab}}}}}{{Ad{Ab}}}}{Kn}{L`}{F`Gb}{c{{j{e}}}{}{}}00000000000{KfGl}{KnBj}{L`Bj}{LbBj}2100{cBj{}}0{Kn{{Nn{Kn}}}}{L`{{Nn{L`}}}}{Kn{{O`{Kn}}}}{L`{{O`{L`}}}}{{{Kl{{Ad{Ab}}}}}Ob}{A`Ob}10{G`{{Cj{Il}}}}{c{{Cj{Il}}}{}}00{Lb{{Cj{{An{Ed}}}}}}{LbOd}{InAb}{LfIn}``{Fl{{Cj{In}}}}{Cd{{Cj{In}}}}{CdIn}{FlIn}{F`In}{ClIn}{{ce}Ed{{B`{{An{Ab}}}}}{{Bh{A`}}}}{{{Kl{{Ad{Ab}}}}}{{Kl{{Ad{Ab}}}}}}{A`A`}{KnKn}{L`L`}{{}If}{{{Kl{{Ad{Ab}}}}{Kl{{Ad{Ab}}}}}{{Cf{{Kl{{Ad{Ab}}}}Bj}}}}{{A`A`}{{Cf{A`Bj}}}}{{{Kl{{Ad{Ab}}}}Ob}{{Cf{{Kl{{Ad{Ab}}}}Bj}}}}{{A`Ob}{{Cf{A`Bj}}}}10{G`{{An{Ab}}}}{c{{An{Ab}}}{}}00{{{Kl{{An{Ab}}}}}{{j{c}}}Of}{c{{j{{Kl{{Ad{Ab}}}}Oh}}}{{B`{{An{Ab}}}}}}{{{Kl{{An{Ab}}}}}{{j{cOj}}}Of}{c{{j{{A`{{Ad{Ab}}}}Ol}}}{{B`{{An{Ab}}}}}}{c{{j{{A`{{Bb{Ab}}}}Ol}}}{{B`{{An{Ab}}}}}}{{{Kl{c}}{Kl{c}}}{{Cj{Hd}}}{JbFb}}{{{A`{c}}{A`{c}}}{{Cj{Hd}}}Jb}{{KnKn}{{Cj{Hd}}}}{{EdEd}{{Cj{Hd}}}}{{L`L`}{{Cj{Hd}}}}{G`Jd}{cJd{}}00`{G`Gh}{cGh{}}00{LbJf}{G`Jf}{cJf{}}00``{OnA`}{Lb{{Cj{A`}}}}{Cd{{Cj{If}}}}{Fl{{Cj{If}}}}{F`{{Cj{If}}}}{Cl{{Cj{If}}}}`{F`Cn}{{KnKn}d}{{L`L`}d}{Kf{{Cj{Cn}}}}{{FlIn}{{En{Fl}}}}{Lb{{Cj{{Nh{{An{Ab}}}}}}}}{{{Ad{Ab}}}{{Nh{{Ad{Ab}}}}}}{{{An{{An{Ab}}}}}{{Nh{{Bb{Ab}}}}}}{{Flc}jJj}{{{Kl{c}}e}j{JhFb}Jj}{{{A`{c}}e}jJhJj}{{Knc}jJj}{{F`c}jJj}{{Edc}jJj}{{L`c}jJj}{{KnKnBj}d}{{L`L`Bj}d}{{{Kl{{Ad{Ab}}}}}d}{A`d}{Lb{{Cj{{A`{{Ad{Ab}}}}}}}}{G`{{Cj{Jl}}}}{c{{Cj{Jl}}}{}}00{LfKh}{Kf{{Cj{A`}}}}{Lb{{Cj{{Nj{{An{Ab}}}}}}}}{{{An{{An{Ab}}}}}{{Nj{{Bb{Ab}}}}}}{Lb{{Cj{If}}}}`{{KnKn}Kn}{{L`L`}L`}{{KnKn}d}{{L`L`}d}32`{G`{{Cj{Jn}}}}{c{{Cj{Jn}}}{}}00{{L`Fl}Bj}{F`Gb}{LfAl}{{MjElBj{Cj{Bn}}}{{j{dh}}}}{Fl}{ce{}{}}000000000{{MjBjCn}Al}{cAl{}}0000000{{{Kl{{Ad{Ab}}}}}Lh}{A`Mn}=<{{{Kl{{Ad{Ab}}}}}Ob}{A`Ob}10{{{An{Ab}}}{{j{{Kl{{Ad{Ab}}}}Ab}}}}0{{{An{Ab}}}{{j{{A`{{Ad{Ab}}}}Ol}}}}{{{An{Ab}}}{{j{{A`{{Ad{Ab}}}}Ab}}}}2{c{{j{e}}}{}{}}0{K`{{j{{Kl{{Ad{Ab}}}}}}}}{{{An{Ab}}}{{j{{Kl{{Ad{Ab}}}}}}}}{K`{{j{{A`{{Ad{Ab}}}}}}}}{{{An{Ab}}}{{j{{A`{{Ad{Ab}}}}}}}}4444444{{cA`}{{j{EdAb}}}{{B`{{An{Ab}}}}}}{{{Cf{AjA`}}}{{j{Ed}}}}{K`{{j{Ed}}}}777777777777777{{{Kl{{Ad{Ab}}}}}{{Kd{Aj}}}}{cAh{}}00000000000`{{{Kl{{Ad{Ab}}}}}Hf}{{{Kl{{Ad{Ab}}}}}Ad}{{{Kl{{Ad{Ab}}}}}If}{{{Kl{{Ad{Ab}}}}}Af}{AbL`}{{KnKn}Kn}{{L`L`}L`}{{{Kl{{Ad{Ab}}}}}{{j{AjNd}}}}{ce{}{}}00000000000{{InKn}In}{{{Kl{c}}Bn}d{}}{{{A`{c}}Bn}d{}}{{InBn}d}{{{Kl{c}}El}{{j{dh}}}{}}{{{A`{c}}El}{{j{dh}}}{}}````````````````{Ah{{Bb{Kb}}}}{{HfKh}}{{AdOb}}{{IfAj}}{{AfLh}}{Hf{{Ad{Kh}}}}{Ad{{Ad{Ob}}}}{If{{Ad{Aj}}}}{Af{{Ad{Lh}}}}{Hf{{An{Ab}}}}{Ad{{An{Ab}}}}{If{{An{Ab}}}}{Af{{An{Ab}}}}{{{An{Ab}}f}{{j{dh}}}}{{{An{Ab}}}Al}{{HfHf}}{{AdAd}}{{IfIf}}{{AfAf}}3210{ce{}{}}00000000000{{{An{Kb}}}{{j{dLl}}}}0000{HfHf}{AdAd}{IfIf}{AfAf}{AlAl}{AhAh}{{ce}d{}{}}00000{{HfHf}Hd}{{AdAd}Hd}{{IfIf}Hd}{{AfAf}Hd}{{}Hf}{{}Ad}{{}If}{{}Af}{Hf}{Ad}{If}{Af}{c{{j{Hf}}}Hl}{c{{j{Ad}}}Hl}{c{{j{If}}}Hl}{c{{j{Af}}}Hl}{{HfHf}Bj}{{AdAd}Bj}{{IfIf}Bj}{{AfAf}Bj}{{AhAh}Bj}{{Hff}{{j{dh}}}}00{{Adf}{{j{dh}}}}00{{Iff}{{j{dh}}}}00{{Aff}{{j{dh}}}}00{{Alf}{{j{dh}}}}0{{Ahf}{{j{dh}}}}{cc{}}{{{Ad{Ab}}}Hf}{KhHf}{ObAd}3{{{Ad{Ab}}}Ad}{{{Ad{Ab}}}If}5{AjIf}6{{{Ad{Ab}}}Af}{LhAf}8{KnAh}9{Aj{{j{Hf}}}}{Aj{{j{Ad}}}}{Aj{{j{If}}}}{Aj{{j{Af}}}}{HfKh}{AdOb}{IfAj}{AfLh}{{Hfc}dIh}{{Adc}dIh}{{Ifc}dIh}{{Afc}dIh}{HfHf}{AdAd}{IfIf}{AfAf};{Hf{{Ad{Ab}}}}{ce{}{}}0{Ad{{Ad{Ab}}}}=1{If{{Ad{Ab}}}}=2<{Af{{Ad{Ab}}}}33{c{{j{e}}}{}{}}00000{KhHf}{ObAd}{AjIf}{LhAf}{AbAh}{Hf}{Ad}{If}{Af}{{HfHf}{{Cj{Hd}}}}{{AdAd}{{Cj{Hd}}}}{{IfIf}{{Cj{Hd}}}}{{AfAf}{{Cj{Hd}}}}{{HfHf}Hf}{{AdAd}Ad}{{IfIf}If}{{AfAf}Af}3210{{Hfc}jJj}{{Adc}jJj}{{Ifc}jJj}{{Afc}jJj}{{HfKh}d}{{AdOb}d}{{IfAj}d}{{AfLh}d}{Hf{{Ad{Ab}}}}{Ad{{Ad{Ab}}}}{If{{Ad{Ab}}}}{Af{{Ad{Ab}}}}{ce{}{}}00000{cAl{}}0000{c{{j{e}}}{}{}}{{{An{Ab}}}{{j{Hf}}}}{K`{{j{Hf}}}}{K`{{j{Ad}}}}{{{An{Ab}}}{{j{Ad}}}}4{{{An{Ab}}}{{j{If}}}}{K`{{j{If}}}}6{{{An{Ab}}}{{j{Af}}}}7{K`{{j{Af}}}}88{K`{{j{Ah}}}}999999{cAh{}}00000<<<<<<{{HfBn}d}{{AdBn}d}{{IfBn}d}{{AfBn}d}{{AhBn}d}{{HfEl}{{j{dh}}}}{{AdEl}{{j{dh}}}}{{IfEl}{{j{dh}}}}{{AfEl}{{j{dh}}}}{{AhEl}{{j{dh}}}}```````````````````````````````````{AnAj}{ce{}{}}00000{DdDd}{AA`AA`}{AnAn}{{ce}d{}{}}00{{}Dd}{An}{{AA`AA`}Bj}{{Ddf}Cb}0{{AA`f}{{j{dh}}}}0{{Anf}{{j{dh}}}}{cc{}}00{Aj{{j{AA`}}}}{Aj{{j{An}}}}{AA`AAb}>>>{c{{j{e}}}{}{}}00{{}{{`{{Lj{}{{Md{An}}}}}}}}{DfDd}{DdDd}{Ddd}{Dd{{Bd{{Fj{Bn}}}}}}{{DdAjc}Bd{{Bh{Bf}}}}{{DdBj}Al}{{DdAjAj{An{Ab}}}Bd}{ce{}{}}00{cAl{}}00:::{{{An{Ab}}}{{Cj{AA`}}}};;;{cAh{}}00333``3333`{ChCh}{{ce}d{}{}}{c{{j{AAd}}}Hl}`{{Chf}Cb}{{AAdf}Cb}{cc{}}099{c{{j{e}}}{}{}}0`{ChDl}{{}{{Cj{Ch}}}}{ChAAd}2{{ChBn}d}{{{Cj{AAf}}Bj}{{Kj{Ch}}}}{{}Ch}5{{Ch{Cj{AAh}}Dl}{{Bd{AAj}}}}{{ChDdBn}{{Bd{AAl}}}}{{Ch{An{Df}}Bn}{{Bd{AAl}}}}{{ChDd}{{Bd{{Cj{Dh}}}}}}{{ChDdBn}{{Bd{{Cj{c}}}}}{}}{{{Cj{Ch}}}{{Cj{Ch}}}}{ChCh}{{Ch{An{Ab}}Bj}d}{{ChDdc}{{Bd{AAl}}}Ef}{{ChDdcAAn}{{Bd{AAl}}}Ef}{{ChDdc}{{Bd{d}}}Ef}{{ChDdcAAn}{{Bd{d}}}Ef}{{ChCd}{{Kj{Bj}}}}{{Ch{An{Cd}}}{{Kj{Cn}}}}{{Ch{An{Cd}}}{{Kj{{Cf{DlDl}}}}}}{{AAdc}jJj}{ce{}{}}{c{{j{e}}}{}{}}000{cAh{}}0{AjAAn}33``````33{c{{`{Ef}}}{{Bn{Cd{Cj{AAh}}Ch}{{Bl{Bj}}}}}}{AB`AB`}{{ce}d{}{}}{{AB`AB`}Bj}{{AB`f}{{j{dh}}}}{cc{}}{{EfCd{Cj{AAh}}Ch}{{ABb{d}}}}{{AB`c}dIh};:{{EfDdChAB`ObOb}d}<{g{{`{Ef}}}Ib{{ABf{}{{Bl{d}}{ABd{c}}}}}{{Bn{Cd{Cj{AAh}}Ch}{{Bl{e}}}}}}<<;={{C`AjBj}{{Bd{{Bb{Ab}}}}}}{{C`Ch{Cj{{An{Ab}}}}{Cj{Aj}}Bj}{{Bd{b}}}}{{C`DdAj}Bd}{{C`{An{Ab}}AjBj}{{Bd{Al}}}}","c":[],"p":[[5,"SigningKey",0],[1,"unit"],[5,"Formatter",1459],[5,"Error",1459],[6,"Result",1460],[10,"RngCore",1461],[10,"CryptoRng",1461],[5,"B64",416],[1,"u8"],[1,"array"],[5,"Error",1462],[5,"TypeId",1463],[1,"str"],[5,"String",1464],[1,"slice"],[10,"AsRef",1465],[5,"Vec",1466],[8,"LkResult",0],[5,"UserData",66],[10,"Into",1465],[1,"bool"],[17,"Output"],[10,"FnMut",1467],[5,"LkScope",66],[8,"Result",1459],[10,"NetPkt",416],[1,"tuple"],[5,"Linkspace",1376],[6,"Option",1468],[5,"NetPktParts",416],[1,"usize"],[5,"Error",1469],[10,"FnOnce",1467],[5,"Query",1283],[8,"LkHash",416],[8,"NetPktBox",416],[5,"LkStatus",143],[8,"Stamp",416],[8,"Domain",416],[8,"GroupID",416],[8,"RootedSpace",416],[5,"Link",416],[10,"PktHandler",1430],[8,"PubKey",416],[6,"FieldEnum",173],[10,"Write",1459],[5,"ReroutePkt",173],[5,"NetPktArc",416],[10,"Sized",1470],[5,"ShareArcPkt",173],[5,"RecvPkt",173],[5,"NetPktFatPtr",1471],[5,"Box",1472],[5,"NetPktPtr",416],[10,"AsNetPktPtr",1473],[10,"Point",416],[5,"NetPktArcPtr",1474],[5,"TreeEntry",173],[5,"TreeKey",1475],[5,"ByteSegments",1476],[10,"Write",1477],[5,"Error",1478],[1,"f64"],[10,"Clone",1479],[5,"PktCmp",173],[6,"Ordering",1480],[5,"U16",1040],[5,"TreeValue",1475],[10,"Borrow",1481],[10,"Deserializer",1482],[10,"Deserialize",1482],[10,"PartialEq",1480],[10,"Debug",1459],[10,"From",1465],[5,"U64",1040],[10,"Hasher",1483],[5,"FieldInfo",1484],[5,"LinkPointHeader",1485],[5,"NetPktHeader",416],[5,"QuickDedup",173],[10,"PartialOrd",1480],[5,"PointParts",1486],[5,"PointHeader",1485],[10,"Serialize",1487],[10,"Serializer",1487],[5,"Signed",1486],[5,"Tail",1486],[5,"ABList",1488],[6,"ABE",1489],[6,"Cow",1490],[6,"PktError",416],[1,"u16"],[8,"Result",1478],[5,"AB",416],[5,"NetFlags",416],[5,"PointTypeFlags",416],[10,"PointExt",416],[5,"LinkPoint",1486],[10,"NetPktExt",416],[1,"u128"],[10,"Iterator",1491],[5,"MatchError",1489],[6,"SpaceError",416],[10,"Ord",1480],[10,"Default",1492],[17,"Item"],[10,"IntoIterator",1493],[6,"PointFields",1486],[5,"PktFmt",416],[1,"never"],[5,"Uint",1494],[6,"NetOpts",1495],[5,"PartialNetHeader",1496],[5,"Utf8Error",1497],[6,"RuleType",1498],[5,"RootedSpaceBytes",1499],[5,"SpaceBytes",1500],[10,"Hash",1483],[5,"Iter",1501],[5,"IterNames",1501],[1,"u32"],[5,"Links",1502],[10,"FromStr",1503],[6,"ABTxtError",1504],[5,"ParseErr",1505],[6,"DecodeError",1506],[10,"SigningExt",416],[10,"Error",1507],[5,"FitSliceErr",1508],[5,"U32",1040],[5,"U128",1040],[5,"U8",1040],[1,"u64"],[6,"TryFitSliceError",1040],[6,"KnownOptions",1283],[6,"PredicateType",1283],[5,"PredInfo",1509],[5,"LkInfo",1376],[5,"Path",1510],[8,"QueryIDRef",1511],[1,"isize"],[1,"i32"],[5,"Span",1512],[6,"StopReason",1430],[6,"ControlFlow",1513],[17,"Residual"],[10,"Try",1514],[8,"RecvPktPtr",416],[15,"MissingBytes",1039],[15,"Overflow",1281]],"b":[[81,"impl-From%3C()%3E-for-UserData%3C\'static%3E"],[82,"impl-From%3C%26%5B%26%5Bu8%5D;+N%5D%3E-for-UserData%3C\'o%3E"],[84,"impl-From%3C(%26dyn+NetPkt,+%26%5B%26%5Bu8%5D%5D)%3E-for-UserData%3C\'o%3E"],[85,"impl-From%3C%26dyn+NetPkt%3E-for-UserData%3C\'o%3E"],[86,"impl-From%3C%26%5B%26%5Bu8%5D%5D%3E-for-UserData%3C\'o%3E"],[275,"impl-Debug-for-FieldEnum"],[276,"impl-Display-for-FieldEnum"],[281,"impl-Display-for-TreeEntry%3CK,+V%3E"],[282,"impl-Debug-for-TreeEntry%3CK,+V%3E"],[516,"impl-AsRef%3CN%3E-for-AB%3CN%3E"],[517,"impl-AsRef%3C%5Bu8%5D%3E-for-AB%3CN%3E"],[518,"impl-AsRef%3CN%3E-for-B64%3CN%3E"],[519,"impl-AsRef%3C%5Bu8;+32%5D%3E-for-B64%3C%5Bu128;+2%5D%3E"],[520,"impl-AsRef%3C%5Bu8%5D%3E-for-B64%3CN%3E"],[541,"impl-Flags-for-NetFlags"],[542,"impl-NetFlags"],[543,"impl-PointTypeFlags"],[544,"impl-Flags-for-PointTypeFlags"],[666,"impl-Debug-for-AB%3CX%3E"],[667,"impl-Display-for-AB%3CX%3E"],[668,"impl-Debug-for-B64%3CN%3E"],[669,"impl-Display-for-B64%3CN%3E"],[670,"impl-Debug-for-PktFmt%3C\'o%3E"],[671,"impl-Display-for-PktFmt%3C\'o%3E"],[672,"impl-Debug-for-NetPktHeader"],[673,"impl-Display-for-NetPktHeader"],[674,"impl-LowerHex-for-NetFlags"],[675,"impl-Binary-for-NetFlags"],[676,"impl-UpperHex-for-NetFlags"],[677,"impl-Octal-for-NetFlags"],[678,"impl-Debug-for-NetFlags"],[681,"impl-Display-for-SpaceError"],[682,"impl-Debug-for-SpaceError"],[683,"impl-Display-for-Link"],[684,"impl-Debug-for-Link"],[685,"impl-Binary-for-PointTypeFlags"],[686,"impl-Debug-for-PointTypeFlags"],[687,"impl-Display-for-PointTypeFlags"],[688,"impl-LowerHex-for-PointTypeFlags"],[689,"impl-UpperHex-for-PointTypeFlags"],[690,"impl-Octal-for-PointTypeFlags"],[691,"impl-Display-for-Error"],[692,"impl-Debug-for-Error"],[695,"impl-From%3C%26%5Bu8%5D%3E-for-%26AB%3C%5Bu8%5D%3E"],[696,"impl-From%3Cu128%3E-for-AB%3C%5Bu8;+16%5D%3E"],[697,"impl-From%3CN%3E-for-AB%3CN%3E"],[701,"impl-From%3CN%3E-for-B64%3CN%3E"],[702,"impl-From%3CUint%3C256,+4%3E%3E-for-B64"],[703,"impl-From%3CUint%3C512,+8%3E%3E-for-B64%3C%5Bu8;+64%5D%3E"],[704,"impl-From%3CNetPktHeader%3E-for-B64"],[707,"impl-From%3CB64%3E-for-NetPktHeader"],[708,"impl-From%3CNetOpts%3E-for-NetPktHeader"],[712,"impl-From%3CNetPktParts%3C\'o%3E%3E-for-NetPktArc"],[713,"impl-From%3C%26dyn+NetPkt%3E-for-NetPktArc"],[724,"impl-NetFlags"],[725,"impl-Flags-for-NetFlags"],[726,"impl-Flags-for-PointTypeFlags"],[727,"impl-PointTypeFlags"],[740,"impl-FromStr-for-AB"],[741,"impl-FromStr-for-AB%3C%5Bu8;+N%5D%3E"],[860,"impl-B64%3C%5Bu8;+N%5D%3E"],[861,"impl-B64%3CVec%3Cu8%3E%3E"],[970,"impl-TryFrom%3CABList%3E-for-AB%3C%5Bu8;+L%5D%3E"],[971,"impl-TryFrom%3C%26%5Bu8%5D%3E-for-AB%3C%5Bu8;+L%5D%3E"],[972,"impl-TryFrom%3CABList%3E-for-B64%3C%5Bu8;+L%5D%3E"],[973,"impl-TryFrom%3C%26%5Bu8%5D%3E-for-B64%3C%5Bu8;+L%5D%3E"],[981,"impl-Link"],[982,"impl-TryFrom%3C(%26str,+B64)%3E-for-Link"],[983,"impl-TryFrom%3CABList%3E-for-Link"],[1013,"impl-AB%3C%5Bu8;+2%5D%3E"],[1014,"impl-AB%3C%5Bu8;+4%5D%3E"],[1015,"impl-AB%3C%5Bu8;+8%5D%3E"],[1016,"impl-AB%3C%5Bu8;+16%5D%3E"],[1128,"impl-Display-for-U16"],[1129,"impl-Binary-for-U16"],[1130,"impl-Debug-for-U16"],[1131,"impl-Debug-for-U32"],[1132,"impl-Binary-for-U32"],[1133,"impl-Display-for-U32"],[1134,"impl-Binary-for-U64"],[1135,"impl-Debug-for-U64"],[1136,"impl-Display-for-U64"],[1137,"impl-Binary-for-U128"],[1138,"impl-Display-for-U128"],[1139,"impl-Debug-for-U128"],[1140,"impl-Display-for-TryFitSliceError"],[1141,"impl-Debug-for-TryFitSliceError"],[1144,"impl-From%3C%5Bu8;+2%5D%3E-for-U16"],[1145,"impl-From%3Cu16%3E-for-U16"],[1146,"impl-From%3Cu32%3E-for-U32"],[1148,"impl-From%3C%5Bu8;+4%5D%3E-for-U32"],[1149,"impl-From%3C%5Bu8;+8%5D%3E-for-U64"],[1151,"impl-From%3Cu64%3E-for-U64"],[1153,"impl-From%3C%5Bu8;+16%5D%3E-for-U128"],[1154,"impl-From%3Cu128%3E-for-U128"],[1174,"impl-Into%3Cu16%3E-for-U16"],[1175,"impl-Into%3C%5Bu8;+2%5D%3E-for-U16"],[1178,"impl-Into%3C%5Bu8;+4%5D%3E-for-U32"],[1179,"impl-Into%3Cu32%3E-for-U32"],[1181,"impl-Into%3C%5Bu8;+8%5D%3E-for-U64"],[1182,"impl-Into%3Cu64%3E-for-U64"],[1184,"impl-Into%3Cu128%3E-for-U128"],[1185,"impl-Into%3C%5Bu8;+16%5D%3E-for-U128"],[1239,"impl-TryFrom%3C%26%5Bu8%5D%3E-for-U16"],[1240,"impl-TryFrom%3CABList%3E-for-U16"],[1241,"impl-TryFrom%3CABList%3E-for-U32"],[1242,"impl-TryFrom%3C%26%5Bu8%5D%3E-for-U32"],[1244,"impl-TryFrom%3C%26%5Bu8%5D%3E-for-U64"],[1245,"impl-TryFrom%3CABList%3E-for-U64"],[1247,"impl-TryFrom%3C%26%5Bu8%5D%3E-for-U128"],[1249,"impl-TryFrom%3CABList%3E-for-U128"],[1332,"impl-Debug-for-Query"],[1333,"impl-Display-for-Query"],[1334,"impl-Debug-for-PredicateType"],[1335,"impl-Display-for-PredicateType"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
